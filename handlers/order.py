from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.sqlite import save_order
from utils.send_to_admin import notify_admin

class OrderState(StatesGroup):
    name = State()
    email = State()
    service = State()
    comment = State()

async def start_order(message: types.Message):
    await message.reply("–í–∞—à–µ —ñ–º‚Äô—è:")
    await OrderState.name.set()

async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.reply("–í–∞—à email:")
    await OrderState.email.set()

async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.reply("–ü–æ—Å–ª—É–≥–∞ –∞–±–æ —Ç–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    await OrderState.service.set()

async def process_service(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text)
    await message.reply("–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä:")
    await OrderState.comment.set()

async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ –ë–î
    save_order(data)

    # –°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞
    await notify_admin(message.bot, data)

    await message.reply("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ ‚úÖ")
    await state.finish()

def register_order_handlers(dp: Dispatcher):
    dp.register_message_handler(start_order, lambda msg: msg.text == "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", state="*")
    dp.register_message_handler(process_name, state=OrderState.name)
    dp.register_message_handler(process_email, state=OrderState.email)
    dp.register_message_handler(process_service, state=OrderState.service)
    dp.register_message_handler(process_comment, state=OrderState.comment)

from config import ADMIN_ID
from database.sqlite import get_last_orders

async def show_orders(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—É –¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    orders = get_last_orders(5)
    if not orders:
        await message.reply("–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    text = "üóÇ –û—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–º–æ–≤–ª–µ–Ω—å:\n\n"
    for order in orders:
        text += (f"üë§ {order[1]}\nüìß {order[2]}\n"
                 f"üõ† {order[3]}\nüí¨ {order[4]}\n‚Äî‚Äî‚Äî\n")
    
    await message.reply(text)

def register_order_handlers(dp: Dispatcher):
    ...
    dp.register_message_handler(show_orders, commands=["–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"])